buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath 'com.vanniktech:gradle-android-javadoc-plugin:0.2.1'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.vanniktech.android.javadoc'

apply from: "$rootDir/gradle/version.gradle"

group = 'com.github.tmurakami'
version = version_name

def package_name = "$group.$name"
def repackaged_jar_name = 'repackaged.jar'

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'
    defaultConfig {
        minSdkVersion 16
        testInstrumentationRunner 'com.github.tmurakami.dexopener.DexOpenerAndroidJUnitRunner'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    lintOptions.disable 'InvalidPackage'
    dexOptions.preDexLibraries !(System.getenv('CIRCLECI') as boolean)
}

configurations {
    jarjar
    repackage
}

dependencies {
    jarjar deps.jarjar
    repackage fileTree(dir: 'libs', includes: ['*.jar'])
    compile files("$buildDir/libs/$repackaged_jar_name") { builtBy 'jarjar' }
    compile deps.runner
    compile deps.classinjector_android
    testCompile deps.junit
    testCompile deps.mockito
}

task jarjar(type: Jar) {
    archiveName = repackaged_jar_name
    doLast {
        ant {
            taskdef name: 'jarjar',
                    classname: 'com.tonicsystems.jarjar.JarJarTask',
                    classpath: configurations.jarjar.asPath
            jarjar(jarfile: archivePath) {
                configurations.repackage.each { zipfileset src: it }
                zap pattern: '**.package-info'
                keep pattern: 'org.ow2.asmdex.*'
                keep pattern: 'org.ow2.asmdex.encodedValue.**'
                keep pattern: 'org.ow2.asmdex.instruction.**'
                keep pattern: 'org.ow2.asmdex.lowLevelUtils.**'
                keep pattern: 'org.ow2.asmdex.specificAnnotation*.**'
                keep pattern: 'org.ow2.asmdex.structure*.**'
                rule pattern: 'org.ow2.asmdex.**', result: "${package_name}.repackaged.org.ow2.asmdex.@1"
            }
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
    from android.sourceSets.main.resources.sourceFiles
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.sourceFiles
    android.libraryVariants.matching { it.name == 'release' }.all {
        owner.dependsOn tasks["prepare${name.capitalize()}Dependencies"]
        owner.classpath += files(android.bootClasspath, javaCompile.classpath)
    }
    def missingPackageListDir = "$buildDir/tmp/javadoc/missing"
    doFirst {
        file(missingPackageListDir).mkdirs()
        file("$missingPackageListDir/package-list").text = 'android.support.test.runner\n'
    }
    options {
        def androidRef = 'https://developer.android.com/reference/'
        links androidRef
        linksOffline androidRef, missingPackageListDir
        def allowScriptInComments = '-allow-script-in-comments'
        if (javax.tools.ToolProvider.systemDocumentationTool.isSupportedOption("-$allowScriptInComments")) {
            addBooleanOption allowScriptInComments, true
        }
        bottom "<script>var l=document.links;for(var i in l){var e=l[i];if(e.href.indexOf(\"$androidRef\")===0)e.target=\"_blank\"}</script>"
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
