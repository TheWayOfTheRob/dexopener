import com.android.ddmlib.DdmPreferences
import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.3.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

apply from: "$rootDir/gradle/android.gradle"

group = 'com.github.tmurakami'

ext.repackaged = "$buildDir/libs/repackaged.jar"

android {
    defaultConfig {
        minSdkVersion 16
        testApplicationId 'test.com.github.tmurakami.dexopener'
        testInstrumentationRunner 'com.github.tmurakami.dexopener.DexOpenerAndroidJUnitRunner'
    }
    lintOptions.disable 'InvalidPackage'
    DdmPreferences.setTimeOut 60000
}

configurations {
    jarjar
    repackage
}

dependencies {
    jarjar deps.jarjar
    repackage deps.classinjector
    repackage deps.dexlib2, {
        exclude group: 'com.beust', module: 'jcommander'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
    api deps.runner
    implementation files(repackaged) { builtBy 'repackageDependencies' }
    testImplementation deps.junit
    testImplementation deps.mockito
}

task repackageDependencies(type: ProGuardTask) {
    outputs.file repackaged
    injars filter: '!AndroidManifest.xml,!META-INF/**', configurations.repackage
    outjars "$buildDir/tmp/repackage.tmp.jar"
    configuration 'proguard-rules.pro'
    doFirst { libraryjars android.bootClasspath }
    doLast {
        def rootPackage = "${project.group}.${project.name}.repackaged"
        ant {
            taskdef name: 'jarjar',
                    classname: 'com.tonicsystems.jarjar.JarJarTask',
                    classpath: configurations.jarjar.asPath
            jarjar(jarfile: repackaged) {
                outJarFiles.each { zipfileset src: it }
                rule pattern: 'com.github.tmurakami.classinjector.**', result: "$rootPackage.@0"
                rule pattern: 'com.google.common.**', result: "$rootPackage.@0"
                rule pattern: 'org.jf.**', result: "$rootPackage.@0"
            }
        }
        files(outJarFiles)*.delete()
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
    from android.sourceSets.main.resources.sourceFiles
}

javadoc {
    def missingPackageListDir = "$buildDir/tmp/javadoc/missing-package-list"
    doFirst {
        file(missingPackageListDir).mkdirs()
        file("$missingPackageListDir/package-list").text = 'android.support.test.runner\n'
    }
    options.linksOffline 'https://developer.android.com/reference/', missingPackageListDir
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
