buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.1'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.github.ben-manes.versions'

apply from: "$rootDir/gradle/version.gradle"

group = 'com.github.tmurakami'
version = ext.versionName

def packageName = "$group.$name"
def repackagedJarName = 'repackaged.jar'

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.2'
    defaultConfig {
        minSdkVersion 8
        testInstrumentationRunner 'com.github.tmurakami.dexopener.DexOpener'
        testInstrumentationRunnerArguments.package = "test.$packageName" as String
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    lintOptions.disable 'InvalidPackage'
    dexOptions.preDexLibraries !(System.getenv('CIRCLECI') as boolean)
}

repositories {
    maven { url 'https://jitpack.io' }
    jcenter()
}

configurations {
    jarjar
    repackage
}

dependencies {
    jarjar 'com.googlecode.jarjar:jarjar:1.3'
    repackage fileTree(dir: 'libs', includes: ['*.jar'])
    compile files("$buildDir/libs/$repackagedJarName") { builtBy 'jarjar' }
    compile 'com.android.support.test:runner:0.5'
    provided 'com.android.support:multidex:1.0.1'
    debugCompile 'com.android.support:support-v4:24.1.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.2.5'
    androidTestCompile 'com.android.support.test:rules:0.6-alpha'
    androidTestCompile 'com.github.tmurakami:dexmockito:0.6.2'
}

task jarjar(type: Jar) {
    archiveName = repackagedJarName
    doLast {
        ant {
            taskdef name: 'jarjar',
                    classname: 'com.tonicsystems.jarjar.JarJarTask',
                    classpath: configurations.jarjar.asPath
            jarjar(jarfile: archivePath) {
                configurations.repackage.each { zipfileset src: it }
                zap pattern: '**.package-info'
                keep pattern: 'org.ow2.asmdex.*'
                keep pattern: 'org.ow2.asmdex.encodedValue.**'
                keep pattern: 'org.ow2.asmdex.instruction.**'
                keep pattern: 'org.ow2.asmdex.lowLevelUtils.**'
                keep pattern: 'org.ow2.asmdex.specificAnnotation*.**'
                keep pattern: 'org.ow2.asmdex.structure*.**'
                rule pattern: 'org.ow2.asmdex.**', result: "${packageName}.repackaged.org.ow2.asmdex.@1"
            }
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
    from android.sourceSets.main.resources.srcDirs
}

artifacts {
    archives sourcesJar
}
