buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.github.ben-manes.versions'

apply from: "$rootDir/gradle/version.gradle"

group = 'com.github.tmurakami'
version = version_name

def package_name = "$group.$name"
def repackaged_jar_name = 'repackaged.jar'

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'
    defaultConfig {
        minSdkVersion 16
        testInstrumentationRunner 'com.github.tmurakami.dexopener.DexOpenerRunner'
        testInstrumentationRunnerArguments.package = "test.$package_name" as String
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    dexOptions.preDexLibraries !(System.getenv('CIRCLECI') as boolean)
}

repositories {
    maven { url 'https://jitpack.io' }
    jcenter()
    mavenLocal()
}

configurations {
    jarjar
    repackage
}

dependencies {
    def mockito_version = 'latest.release'
    jarjar 'com.googlecode.jarjar:jarjar:1.3'
    repackage fileTree(dir: 'libs', includes: ['*.jar'])
    compile files("$buildDir/libs/$repackaged_jar_name") { builtBy 'jarjar' }
    compile('com.android.support.test:runner:0.5') {
        exclude group: 'junit', module: 'junit'
    }
    compile 'com.github.tmurakami.classinjector:classinjector-android:0.2.6'
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:$mockito_version"
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile "org.mockito:mockito-android:$mockito_version"
}

task jarjar(type: Jar) {
    archiveName = repackaged_jar_name
    doLast {
        ant {
            taskdef name: 'jarjar',
                    classname: 'com.tonicsystems.jarjar.JarJarTask',
                    classpath: configurations.jarjar.asPath
            jarjar(jarfile: archivePath) {
                configurations.repackage.each { zipfileset src: it }
                zap pattern: '**.package-info'
                keep pattern: 'org.ow2.asmdex.*'
                keep pattern: 'org.ow2.asmdex.encodedValue.**'
                keep pattern: 'org.ow2.asmdex.instruction.**'
                keep pattern: 'org.ow2.asmdex.lowLevelUtils.**'
                keep pattern: 'org.ow2.asmdex.specificAnnotation*.**'
                keep pattern: 'org.ow2.asmdex.structure*.**'
                rule pattern: 'org.ow2.asmdex.**', result: "${package_name}.repackaged.org.ow2.asmdex.@1"
            }
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
    from android.sourceSets.main.resources.sourceFiles
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += files(configurations.compile)
    doFirst {
        classpath += files(android.bootClasspath)
    }
    options.links 'https://developer.android.com/reference/'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
